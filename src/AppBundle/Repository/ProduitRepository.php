<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Produit;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\Mapping;

/**
 * ProduitRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProduitRepository extends \Doctrine\ORM\EntityRepository
{

    public function findByPrix($categorie)
    {
        return $this->getEntityManager()
            ->createQuery(
            'SELECT p FROM AppBundle:Produit p WHERE p.categorie = :categorie ORDER BY p.prix ASC'
            )
            ->setParameters(array(
                'categorie' => $categorie,
            ))
            ->getResult();
    }

    public function findByAvis($categorie)
    {
        return $this->getEntityManager()
            ->createQuery(
                'SELECT p FROM AppBundle:Produit p WHERE p.categorie = :categorie ORDER BY p.note DESC'
            )
            ->setParameters(array(
                'categorie' => $categorie,
            ))
            ->getResult();
    }

    public function findByPref($categorie, $preference, $commission)
    {
        $result = $this->findByPop($categorie);
        if (!$preference) {
            return $result;
        }
        switch ($categorie) {
            case 'ordinateur':
                $prixfiltre = $preference->getBudgetOrdinateur();
                break;
            case 'livre':
                $prixfiltre = $preference->getBudgetLivre();
                break;
            case 'quotidien':
                $prixfiltre = $preference->getBudgetObjetCourant();
                break;
            default:
                $prixfiltre = 0;
                break;
        }
        $filter_result = array_reduce($result, function ($cb, $r) use ($prixfiltre, $commission) {
            /* @var Produit $r */
            if ($r->getPrix()*(1+$commission) <= $prixfiltre) {
                $cb[0][] = $r;
            }
            else {
                $cb[1][] = $r;
            }
            return $cb;
        }, array([],[]));

        return array_merge($filter_result[0],$filter_result[1]);
    }

    public function findByPop($categorie)
    {
        return $this->getEntityManager()
            ->createQuery(
                'SELECT p FROM AppBundle:Produit p WHERE p.categorie = :categorie ORDER BY p.nbAchat DESC'
            )
            ->setParameters(array(
                'categorie' => $categorie,
            ))
            ->getResult();
    }

    public function findByChoice($choice, $categorie, $preference = null, $commission = 0)
    {
        switch ($choice)
        {
            case 1:
                $result = $this->findByPrix($categorie);
                break;
            case 2:
                $result = $this->findByAvis($categorie);
                break;
            case 3:
                $result = $this->findByPref($categorie, $preference, $commission);
                break;
            default:
                $result = $this->findByPop($categorie);
                break;
        }
        return $result;
    }
}
